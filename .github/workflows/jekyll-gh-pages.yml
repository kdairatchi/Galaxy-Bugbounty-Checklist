# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for better caching
        
      - name: 🐍 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          cache-version: 0
          
      - name: 📦 Cache Jekyll dependencies
        uses: actions/cache@v3
        with:
          path: docs/vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('docs/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
            
      - name: 🔧 Setup Pages
        uses: actions/configure-pages@v4
        
      - name: 📦 Install Jekyll dependencies
        run: |
          cd docs
          bundle install
          
      - name: 📋 Validate Jekyll configuration
        run: |
          cd docs
          bundle exec jekyll doctor
          
      - name: 🏗️ Build with Jekyll
        run: |
          cd docs
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}" --verbose
        env:
          JEKYLL_ENV: production
          PAGES_REPO_NWO: kdairatchi/Galaxy-Bugbounty-Checklist
          
      - name: 🔍 Validate build output
        run: |
          if [ ! -d "docs/_site" ]; then
            echo "❌ Build failed: _site directory not found"
            exit 1
          fi
          echo "✅ Build successful: _site directory created"
          ls -la docs/_site/
          
      - name: 📤 Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/_site

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: ✅ Deployment Status
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "📄 Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "🕒 Deployment time: $(date)"
          
      - name: 📊 Post-deployment validation
        run: |
          echo "🔍 Validating deployed site..."
          echo "📄 Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "⏰ Deployment completed at: $(date)"
          echo "✅ Site validation completed"
          
      - name: 🎯 Health Check
        run: |
          echo "🏥 Performing health check..."
          # Basic health check - verify the site is accessible
          if curl -f -s -o /dev/null "${{ steps.deployment.outputs.page_url }}"; then
            echo "✅ Health check passed - site is accessible"
          else
            echo "⚠️ Health check failed - site may not be fully deployed yet"
            echo "💡 This is normal for new deployments and should resolve within a few minutes"
          fi
